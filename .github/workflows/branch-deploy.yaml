name: Deploy feature branch to staging

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and contenerize
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    env:
      IMAGE_NAME: 'forge-k8s'
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'registry.npmjs.org'
          scope: '@flowforge'
          always-auth: true

      - name: Build package
        run: |
          echo "Installing pg-hstore@^2.3.4" \
          npm install --no-audit --no-fund pg-hstore@^2.3.4 && \
          echo "Installing @flowforge/kubernetes" \
          npm install --no-audit --no-fund @flowforge/kubernetes && \
          echo "Installing @flowforge/driver-kubernetes" \    
          npm install --no-audit --no-fund @flowfuse/driver-kubernetes && \
          echo "Installing all other dependencies" \
          npm install --no-audit --no-fund && \
          echo "Building package" \ 
          npm run build

      - name: Set variables
        run: | 
          echo "tagged_image=${{ env.IMAGE_NAME }}:pr-${{ env.PR_NUMBER}}" >> $GITHUB_ENV

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
  
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Build container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: "./docker/Dockerfile"
          tags: ${{ env.tagged_image }}
          push: false
          outputs: type=docker,dest=/tmp/k8s-forge.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: k8s-forge
          path: /tmp/k8s-forge.tar
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    permissions:
      packages: read
      contents: read
    env:
      IMAGE_NAME: 'forge-k8s'
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set variables
        run: | 
          echo "tagged_image=${{ env.IMAGE_NAME }}:pr-${{ env.PR_NUMBER}}" >> $GITHUB_ENV
          echo "timestamp=$(date +%s)" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: k8s-forge
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/k8s-forge.tar
          docker image ls -a

      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: k8s-forge
          failOnError: false

      - name: Configure AWS credentials for ECR interaction
        id: aws-config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: eu-west-1
          mask-aws-account-id: true
        
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Push to ECR
        run: |
          docker tag ${{ env.tagged_image }} ${{ steps.aws-config.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/flowforge/${{ env.tagged_image }}-${{ env.timestamp }}
          docker push ${{ steps.aws-config.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/flowforge/${{ env.tagged_image }}-${{ env.timestamp }}

      - name: Configure AWS credentials for EKS interaction
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::${{ steps.aws-config.outputs.aws-account-id }}:role/K8sAdmin
          role-duration-seconds: 1200

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region eu-west-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Check out FlowFuse/helm repository (to access latest helm chart)
        uses: actions/checkout@v3
        with:
          repository: 'FlowFuse/helm'
          ref: 'main'
          path: 'helm-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy forge app
        run: |
          # helm repo add flowforge https://flowfuse.github.io/helm
          # helm repo update
          helm upgrade --install \
            --create-namespace \
            --namespace "pr-${{ env.PR_NUMBER }}" \
            --timeout 300s \
            --wait \
            --atomic \
            --values ci/ci-values.yaml \
            --set forge.image=${{ steps.aws-config.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/flowforge/${{ env.tagged_image }}-${{ env.timestamp }} \
            --set forge.entryPoint=${{ env.PR_NUMBER }}.flowfuse.dev \
            --set forge.projectNamespace=pr-${{ env.PR_NUMBER }}-projects \
            --set forge.clusterRole.name=pr-${{ env.PR_NUMBER }}-clusterrole \
            flowfuse-pr-${{ env.PR_NUMBER }} ./helm-repo/helm/flowforge

      # - name: Deploy forge app
      #   uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
      #     aws-region: eu-west-1
      #     cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}
      #     cluster-role-arn: arn:aws:iam::${{ steps.aws-config.outputs.aws-account-id }}:role/K8sAdmin
      #     namespace: "pr-${{ env.PR_NUMBER }}"
      #     name: flowfuse-pr-${{ env.PR_NUMBER }}
      #     chart-repository: https://flowfuse.github.io/helm
      #     config-files: ci/ci-values.yaml
      #     timeout: 300s
      #     atomic: true
      #     dry-run: true
      #     helm-wait: true
